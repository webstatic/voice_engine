const chalk = require("chalk");

module.exports = function (input, flags, dbMethods, cb) {
  let reusltObj = {}
  dbMethods.search(input, function (err, data) {
    if (err) {
      console.log("Something wrong happened !", err);
    } else if (data) {
      // log("Kanji", input);

      reusltObj = getKanjiInfo(data)
      //reusltObj.map((x) => showNiceLogs(x));
      //reusltObj.Kanji = input

      flags.examples && showExamples(input, dbMethods.searchSentence);

      // console.log("\n");
    } else {
      console.log("Nothing found.");
    }
    if (cb) cb(reusltObj)
  });

  // return reusltObj
};

function getKanjiInfo(data) {
  if (!data) {
    return undefined;
  }

  return data.map((x) => showNiceData(x));
}

function showNiceData(data) {
  const result = Object.assign({}, data);
  const getValue = (key, split) => {
    if (result[key].length > 0) {
      return result[key].split(split);
    }
    return;
  };

  //result.onyomi = getValue("onyomi", "、");
  result.meaning = getValue("meaning", ";");
  result.kanji_parts = getValue("kanji_parts", ",");
  // result.part_of = getValue("part_of", ",");

  return result;
}

function showNiceLogs(data) {
  data.onyomi && log("Onyomi", data.onyomi.join("、"));
  data.kunyomi && log("Kunyomi", data.kunyomi);
  data.strokes && log("Strokes", data.strokes);
  data.meaning && log("Meaning", data.meaning.join(", "));
  data.jlpt && log("JLPT", data.jlpt);
  data.kanji_parts && log("Parts", data.kanji_parts.join(", "));
  data.part_of && log("Part of", data.part_of.join(", "));
}

function log(text, data) {
  console.log(chalk.inverse(text), data);
}

function showExamples(input, searchSentence) {
  searchSentence(input, (err, data) => {
    if (err) {
      console.log("Oops!", err);
    } else if (data.length > 0) {
      console.log(chalk.inverse("\nExamples"));
      data.forEach((x) => console.log(`- ${x.japanese} (${x.english})`));
    }
  });
}
